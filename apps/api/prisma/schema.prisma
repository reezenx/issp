// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     String @id @default(uuid())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("profiles")
}

model Category {
  id        String    @id @default(cuid())
  code      String    @unique
  name      String
  agencies  Agency[]
  createdBy String
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("categories")
}

model Agency {
  id         String    @id @default(cuid())
  code       String    @unique
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  name       String
  email      String
  phone      String
  users      User[]
  createdBy  String
  updatedBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  issps      ISSP[]
  tags       String[]

  @@map("agencies")
}

model User {
  id            String          @id @default(cuid())
  firstName     String
  lastName      String
  email         String          @unique
  phone         String
  password      String
  createdBy     String
  updatedBy     String?
  sessionToken  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  agency        Agency          @relation(fields: [agencyId], references: [id])
  agencyId      String
  role          Role[]          @default([VIEWER])
  userRole      UserRole        @relation("UserRole", fields: [roleId], references: [id])
  roleId        String
  status        UserStatus
  profile       Profile?
  issps         ISSP[]          @relation("ISSPUsers")
  tags          String[]
  authoredIssps ISSP[]          @relation(name: "ISSPAuthor")
  history       ActionHistory[]
  roles         UserRole[]

  @@map("users")
}

model UserRole {
  id          String       @id @default(cuid())
  name        String       @unique
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedBy   String?
  updatedAt   DateTime?    @updatedAt()
  permissions Permission[]
  users       User[]
  user        User[]       @relation("UserRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  role       UserRole  @relation(fields: [roleId], references: [id])
  roleId     String
  action     String
  subject    String
  inverted   Boolean?  @default(false)
  readOnly   Boolean?  @default(false)
  conditions Json?
  reason     String?
  createdBy  String
  updatedBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt()

  @@map("permissions")
}

model Project {
  id                          String              @id @default(cuid())
  title                       String
  description                 String?
  cost                        Decimal             @db.Decimal(19, 2)
  quantity                    Int
  unit                        String
  tags                        String[]
  createdBy                   String
  updatedBy                   String?
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime?           @updatedAt()
  projectType                 ProjectType?        @relation(fields: [projectTypeId], references: [id])
  projectTypeId               String?
  projectCategory             ProjectCategory?    @relation(fields: [projectCategoryId], references: [id])
  projectCategoryId           String?
  projectImplementationType   ImplementationType? @relation(fields: [projectImplementationTypeId], references: [id])
  projectImplementationTypeId String?
  projectBudgetType           BudgetType?         @relation(fields: [projectBudgetTypeId], references: [id])
  projectBudgetTypeId         String?
  projectBudgetSource         BudgetSource?       @relation(fields: [projectBudgetSourceId], references: [id])
  projectBudgetSourceId       String?

  @@map("projects")
}

model ProjectType {
  id        String    @id @default(cuid())
  code      String    @unique
  name      String
  projects  Project[]
  createdBy String
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("project-types")
}

model ProjectCategory {
  id        String    @id @default(cuid())
  code      String    @unique
  name      String
  projects  Project[]
  createdBy String
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("project-categories")
}

model ImplementationType {
  id        String    @id @default(cuid())
  code      String    @unique
  name      String
  projects  Project[]
  createdBy String
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("implementation-types")
}

model BudgetType {
  id        String    @id @default(cuid())
  code      String    @unique
  name      String
  projects  Project[]
  createdBy String
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("budget-types")
}

model BudgetSource {
  id        String    @id @default(cuid())
  code      String    @unique
  name      String
  projects  Project[]
  createdBy String
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("budget-source")
}

model ISSP {
  id          String          @id @default(cuid())
  title       String
  description String?
  status      ISSPStatus      @default(NOT_STARTED)
  startYear   Int
  endYear     Int
  tags        String[]
  users       User[]          @relation("ISSPUsers")
  agency      Agency          @relation(fields: [agencyId], references: [id])
  agencyId    String
  author      User            @relation(name: "ISSPAuthor", fields: [authorId], references: [id])
  authorId    String
  version     Int?            @default(1)
  readOnly    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  createdBy   String
  updatedBy   String?
  updatedAt   DateTime?       @updatedAt
  history     ActionHistory[]

  @@map("issps")
}

model ActionHistory {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  issp         ISSP       @relation(fields: [isspId], references: [id])
  isspId       String
  isspVersion  Int
  action       ISSPAction
  changes      String[]
  parentModule String
  childModule  String
  tags         String[]
  createdAt    DateTime   @default(now())
  createdBy    String
}

enum Role {
  VIEWER
  PLANNER
  EVALUATOR
  VALIDATOR
  ASSIGNER
  ENDORSER
  APPROVER
  ADMIN
  SUPER_ADMIN
}

enum ISSPStatus {
  NOT_STARTED
  UNDER_REVIEW
  FOR_VALIDATION
  FOR_ENDORSEMENT
  APPROVED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum ISSPAction {
  VIEW
  CREATE
  AMEND
  INSERT
  ASSIGN
  UPDATE
  ENDORSED
  APPROVE
}
