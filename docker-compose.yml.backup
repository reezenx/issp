version: '3.9'

services:
  postgres:
    image: postgres:13.5
    restart: always
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - postgres

  api:
    container_name: api
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      - postgres
    build:
      dockerfile: ./deploy/api/Dockerfile
    networks:
      - postgres

  client:
    container_name: client
    restart: always
    ports:
      - '4200:80'
    depends_on:
      - api
    build:
      dockerfile: ./deploy/client/Dockerfile"
    networks:
      - postgres

networks:
  postgres:
    driver: bridge
volumes:
  postgres:


version: '3'
services:
  postgres:
    image: postgres:15.1
    networks:
      - postgres
    volumes:
      - /data/postgres:/data/postgres
    env_file:
      - docker.env

  pgadmin:
    image: dpage/pgadmin4:6.18
    networks:
      - postgres
    ports:
      - '8080:80'
    volumes:
      - /data/pgadmin:/root/.pgadmin
    env_file:
      - docker.env

  api:
    container_name: api
    build:
      dockerfile: ./deploy/api/Dockerfile
    command: npm run start:api
    volumes:
      - ./src:/user/src/app/src
    env_file:
      - .env
    restart: always
    ports:
      - '3000:3000'
      - '9229:9229'
    depends_on:
      - postgres
    networks:
      - postgres

  client:
    container_name: client
    build:
      dockerfile: ./deploy/client/Dockerfile"
    restart: always
    ports:
      - '4203:4200'
    depends_on:
      - api
    networks:
      - postgres

networks:
  postgres:
    driver: bridge

